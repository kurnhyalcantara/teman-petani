// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	sql "database/sql"

	mock "github.com/stretchr/testify/mock"
)

// DatabaseConnectionInterface is an autogenerated mock type for the DatabaseConnectionInterface type
type DatabaseConnectionInterface struct {
	mock.Mock
}

// Begin provides a mock function with given fields:
func (_m *DatabaseConnectionInterface) Begin() (*sql.Tx, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 *sql.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func() (*sql.Tx, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *sql.Tx); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *DatabaseConnectionInterface) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Open provides a mock function with given fields: driverName, source
func (_m *DatabaseConnectionInterface) Open(driverName string, source string) (*sql.DB, error) {
	ret := _m.Called(driverName, source)

	if len(ret) == 0 {
		panic("no return value specified for Open")
	}

	var r0 *sql.DB
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*sql.DB, error)); ok {
		return rf(driverName, source)
	}
	if rf, ok := ret.Get(0).(func(string, string) *sql.DB); ok {
		r0 = rf(driverName, source)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.DB)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(driverName, source)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields:
func (_m *DatabaseConnectionInterface) Ping() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetMaxIdleConnections provides a mock function with given fields: n
func (_m *DatabaseConnectionInterface) SetMaxIdleConnections(n int) {
	_m.Called(n)
}

// SetMaxOpenConnections provides a mock function with given fields: n
func (_m *DatabaseConnectionInterface) SetMaxOpenConnections(n int) {
	_m.Called(n)
}

// NewDatabaseConnectionInterface creates a new instance of DatabaseConnectionInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabaseConnectionInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *DatabaseConnectionInterface {
	mock := &DatabaseConnectionInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
